// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Starfish.Templates.Objects
{
    using System.Collections.Generic;
    using System;
    
    
    #line 1 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class StateMachine : StateMachineBase
    {
        public virtual string TransformText()
        {
            
            #line 8 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
 if(language.ToString() == "VB") {
            
            #line default
            #line hidden
            this.Write("Imports System\r\nImports System.ServiceModel\r\nImports ");
            
            #line 11 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(".Results\r\n\r\nNamespace ");
            
            #line 13 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(".Contracts\r\n\r\nPublic Partial Class ");
            
            #line 15 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("StateMachine\r\n\r\nEnd Class\r\n\r\nEnd Namespace\r\n");
            
            #line 20 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
 } else if (language.ToString() == "CSharp") {
            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.ServiceModel;\r\nusing ");
            
            #line 23 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(".Results;\r\n\r\nnamespace ");
            
            #line 25 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(".Contracts\r\n{\r\n\r\n\t[ServiceContract()]\r\n\tpublic partial class ");
            
            #line 29 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("StateMachine\r\n\t{\r\n\r\n\t}\r\n\r\n}\r\n");
            
            #line 35 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"
 } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\Josh\Dropbox\Code\Starfish\Generators\Templates\Objects\StateMachine.tt"

private string _namespaceField;

/// <summary>
/// Access the namespace parameter of the template.
/// </summary>
private string @namespace
{
    get
    {
        return this._namespaceField;
    }
}

private string _classNameField;

/// <summary>
/// Access the className parameter of the template.
/// </summary>
private string className
{
    get
    {
        return this._classNameField;
    }
}

private global::System.Collections.Generic.List<Starfish.Structures.MethodStruct> _methodsField;

/// <summary>
/// Access the methods parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<Starfish.Structures.MethodStruct> methods
{
    get
    {
        return this._methodsField;
    }
}

private global::Starfish.PatternBuilderLanguageCode _languageField;

/// <summary>
/// Access the language parameter of the template.
/// </summary>
private global::Starfish.PatternBuilderLanguageCode language
{
    get
    {
        return this._languageField;
    }
}


public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool namespaceValueAcquired = false;
if (this.Session.ContainsKey("namespace"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["namespace"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'namespace\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._namespaceField = ((string)(this.Session["namespace"]));
        namespaceValueAcquired = true;
    }
}
if ((namespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("namespace");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'namespace\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._namespaceField = ((string)(data));
        }
    }
}
bool classNameValueAcquired = false;
if (this.Session.ContainsKey("className"))
{
    if ((typeof(string).IsAssignableFrom(this.Session["className"].GetType()) == false))
    {
        this.Error("The type \'System.String\' of the parameter \'className\' did not match the type of t" +
                "he data passed to the template.");
    }
    else
    {
        this._classNameField = ((string)(this.Session["className"]));
        classNameValueAcquired = true;
    }
}
if ((classNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("className");
    if ((data != null))
    {
        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.String\' of the parameter \'className\' did not match the type of t" +
                    "he data passed to the template.");
        }
        else
        {
            this._classNameField = ((string)(data));
        }
    }
}
bool methodsValueAcquired = false;
if (this.Session.ContainsKey("methods"))
{
    if ((typeof(global::System.Collections.Generic.List<Starfish.Structures.MethodStruct>).IsAssignableFrom(this.Session["methods"].GetType()) == false))
    {
        this.Error("The type \'System.Collections.Generic.List<Starfish.Structures.MethodStruct>\' of t" +
                "he parameter \'methods\' did not match the type of the data passed to the template" +
                ".");
    }
    else
    {
        this._methodsField = ((global::System.Collections.Generic.List<Starfish.Structures.MethodStruct>)(this.Session["methods"]));
        methodsValueAcquired = true;
    }
}
if ((methodsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("methods");
    if ((data != null))
    {
        if ((typeof(global::System.Collections.Generic.List<Starfish.Structures.MethodStruct>).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'System.Collections.Generic.List<Starfish.Structures.MethodStruct>\' of t" +
                    "he parameter \'methods\' did not match the type of the data passed to the template" +
                    ".");
        }
        else
        {
            this._methodsField = ((global::System.Collections.Generic.List<Starfish.Structures.MethodStruct>)(data));
        }
    }
}
bool languageValueAcquired = false;
if (this.Session.ContainsKey("language"))
{
    if ((typeof(global::Starfish.PatternBuilderLanguageCode).IsAssignableFrom(this.Session["language"].GetType()) == false))
    {
        this.Error("The type \'Starfish.PatternBuilderLanguageCode\' of the parameter \'language\' did no" +
                "t match the type of the data passed to the template.");
    }
    else
    {
        this._languageField = ((global::Starfish.PatternBuilderLanguageCode)(this.Session["language"]));
        languageValueAcquired = true;
    }
}
if ((languageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("language");
    if ((data != null))
    {
        if ((typeof(global::Starfish.PatternBuilderLanguageCode).IsAssignableFrom(data.GetType()) == false))
        {
            this.Error("The type \'Starfish.PatternBuilderLanguageCode\' of the parameter \'language\' did no" +
                    "t match the type of the data passed to the template.");
        }
        else
        {
            this._languageField = ((global::Starfish.PatternBuilderLanguageCode)(data));
        }
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class StateMachineBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
